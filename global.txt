import os
import requests
from web3 import Web3
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Set up Ethereum/TRC20 connection
w3 = Web3(Web3.HTTPProvider(os.getenv('ETHEREUM_NODE_URL')))

# Set up wallet addresses
TRUST_WALLET_ADDRESS = os.getenv('TRUST_WALLET_ADDRESS')
BINANCE_WALLET_ADDRESS = os.getenv('BINANCE_WALLET_ADDRESS')
BUSINESS_PAY_WALLET_ADDRESS = os.getenv('BUSINESS_PAY_WALLET_ADDRESS')

# Set up contract details
CONTRACT_ADDRESS = os.getenv('CONTRACT_ADDRESS')
CONTRACT_ABI = json.load(open('contract_abi.json'))

# Create contract instance
contract = w3.eth.contract(address=CONTRACT_ADDRESS, abi=CONTRACT_ABI)

def monetize_funds(amount):
    """
    Monetize the global business pay virtual funds.
    
    Args:
        amount (float): The amount of funds to be monetized.
    
    Returns:
        bool: True if the funds were successfully monetized, False otherwise.
    """
    try:
        # Verify the funds using the blockchain
        if not verify_funds(amount):
            return False
        
        # Withdraw the funds and send them to the user's wallet
        tx_hash = withdraw_and_send(amount)
        
        # Wait for the transaction to be mined
        tx_receipt = w3.eth.waitForTransactionReceipt(tx_hash)
        
        # Check the transaction status
        if tx_receipt.status == 1:
            print(f"Successfully monetized {amount} virtual funds.")
            return True
        else:
            print(f"Failed to monetize {amount} virtual funds.")
            return False
    except Exception as e:
        print(f"Error monetizing funds: {e}")
        return False

def verify_funds(amount):
    """
    Verify the global business pay virtual funds using the blockchain.
    
    Args:
        amount (float): The amount of funds to be verified.
    
    Returns:
        bool: True if the funds are verified, False otherwise.
    """
    try:
        # Call the contract function to verify the funds
        verified = contract.functions.verifyFunds(BUSINESS_PAY_WALLET_ADDRESS, amount).call()
        
        if verified:
            print(f"{amount} virtual funds verified.")
            return True
        else:
            print(f"Failed to verify {amount} virtual funds.")
            return False
    except Exception as e:
        print(f"Error verifying funds: {e}")
        return False

def withdraw_and_send(amount):
    """
    Withdraw the monetized funds and send them to the user's wallet.
    
    Args:
        amount (float): The amount of funds to be withdrawn and sent.
    
    Returns:
        str: The transaction hash.
    """
    try:
        # Withdraw the funds from the business pay wallet
        tx = contract.functions.withdrawFunds(BUSINESS_PAY_WALLET_ADDRESS, amount).buildTransaction({
            'from': BUSINESS_PAY_WALLET_ADDRESS,
            'gas': 100000,
            'gasPrice': w3.toWei('50', 'gwei'),
            'nonce': w3.eth.getTransactionCount(BUSINESS_PAY_WALLET_ADDRESS)
        })
        
        # Sign the transaction
        signed_tx = w3.eth.account.signTransaction(tx, private_key=os.getenv('BUSINESS_PAY_WALLET_PRIVATE_KEY'))
        
        # Send the transaction
        tx_hash = w3.eth.sendRawTransaction(signed_tx.rawTransaction)
        
        # Send the funds to the user's wallet
        if TRUST_WALLET_ADDRESS:
            send_to_trust_wallet(amount, tx_hash)
        elif BINANCE_WALLET_ADDRESS:
            send_to_binance_wallet(amount, tx_hash)
        else:
            print("No valid wallet address provided.")
            return None
        
        return tx_hash.hex()
    except Exception as e:
        print(f"Error withdrawing and sending funds: {e}")
        return None

def send_to_trust_wallet(amount, tx_hash):
    """
    Send the monetized funds to the user's Trust Wallet.
    
    Args:
        amount (float): The amount of funds to be sent.
        tx_hash (str): The transaction hash.
    """
    try:
        # Call the Trust Wallet API to send the funds
        response = requests.post(
            f"https://api.trustwallet.com/v3/transactions/trc20/send",
            json={
                "to": TRUST_WALLET_ADDRESS,
                "amount": str(amount),
                "contractAddress": CONTRACT_ADDRESS,
                "transactionHash": tx_hash.hex()
            },
            headers={
                "Content-Type": "application/json",
                "X-API-Key": os.getenv('TRUST_WALLET_API_KEY')
            }
        )
        
        if response.status_code == 200:
            print(f"Successfully sent {amount} virtual funds to Trust Wallet.")
        else:
            print(f"Failed to send {amount} virtual funds to Trust Wallet.")
    except Exception as e:
        print(f"Error sending funds to Trust Wallet: {e}")

def send_to_binance_wallet(amount, tx_hash):
    """
    Send the monetized funds to the user's Binance Wallet.
    
    Args:
        amount (float): The amount of funds to be sent.
        tx_hash (str): The transaction hash.
    """
    try:
        # Call the Binance API to send the funds
        response = requests.post(
            f"https://api.binance.com/api/v3/withdraw",
            data={
                "asset": "USDT",
                "amount": str(amount),
                "address": BINANCE_WALLET_ADDRESS,
                "network": "TRC20",
                "transactionId": tx_hash.hex()
            },
            headers={
                "X-MBX-APIKEY": os.getenv('BINANCE_API_KEY')
            }
        )
        
        if response.status_code == 200:
            print(f"Successfully sent {amount} virtual funds to Binance Wallet.")
        else:
            print(f"Failed to send {amount} virtual funds to Binance Wallet.")
    except Exception as e:
        print(f"Error sending funds to Binance Wallet: {e}")